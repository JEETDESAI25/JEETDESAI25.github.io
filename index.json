[{"content":"Remote Claude Code: Control Your AI Assistant from Anywhere Ever wanted to check on your Claude Code sessions while you\u0026rsquo;re grabbing coffee? Or maybe you\u0026rsquo;re lying in bed and want to see if that long-running task finally finished? I\u0026rsquo;ve been there. After setting up this workflow, I can now monitor and control Claude Code from my phone and iPad and it\u0026rsquo;s been really fun to use.\nWhat We\u0026rsquo;re Using Tailscale: Secure networking to reach your Mac from anywhere SSH Keys + Mosh: Resilient terminal connections that handle network changes tmux: Session persistence so Claude keeps running even if you disconnect Blink Shell: Terminal app for iOS and iPadOS The workflow: Start Claude Code in a tmux session on your Mac, connect via Mosh from your phone, and monitor/control everything remotely.\nPrerequisites Mac with Claude Code or your choice of AI Assistant installed iPhone/iPad with decent data/WiFi Step 1: Install Tailscale Tailscale creates a secure private network between your devices. Think of it as a VPN that \u0026ldquo;just works.\u0026rdquo;\nOn your Mac: Download Tailscale and install Sign up and connect to your tailnet Note your machine name (usually something like macbook-yourname) On your phone: Install the Tailscale app Connect to the same tailnet Verify you can see your Mac in the device list Step 2: Set Up SSH Keys We\u0026rsquo;ll use SSH keys instead of passwords for secure, seamless authentication.\nGenerate SSH key on your phone: I\u0026rsquo;m using Blink Shell (iOS Only) as it seems best option for Apple ecosystem:\nInstall Blink Shell Go to Settings → Keys Generate a new key using the Secure Enclave feature Copy the public key Add the key to your Mac: # Create SSH directory if it doesn\u0026#39;t exist mkdir -p ~/.ssh # Add your phone\u0026#39;s public key nano ~/.ssh/authorized_keys # Paste the public key from your phone, save and exit # Set correct permissions chmod 700 ~/.ssh chmod 600 ~/.ssh/authorized_keys Step 3: Configure SSH Server Edit your Mac\u0026rsquo;s SSH configuration to use key authentication:\nsudo nano /etc/ssh/sshd_config Add or modify these lines:\nPubkeyAuthentication yes PasswordAuthentication no ChallengeResponseAuthentication no Enable SSH and restart the service:\n# Enable Remote Login in System Preferences → Sharing # Or via command line: sudo systemsetup -setremotelogin on # Restart SSH service sudo launchctl stop com.openssh.sshd sudo launchctl start com.openssh.sshd Step 4: Install and Configure Mosh Mosh is like SSH but handles network changes gracefully – perfect for mobile use.\nOn your Mac: # Install via Homebrew brew install mosh # Verify installation which mosh-server Test the connection: From Blink Shell, try connecting:\n# Replace with your Mac\u0026#39;s username and Tailscale IP ssh yourusername@100.xxx.xxx.xxx If SSH works without asking for a password, you\u0026rsquo;re ready for Mosh:\nmosh yourusername@100.xxx.xxx.xxx Step 5: Set Up tmux tmux keeps your sessions running even when you disconnect. For a complete tmux guide, check out our tmux blog post.\nStep 6: The Complete Workflow Starting a session: # Connect via Mosh from your phone mosh yourusername@100.xxx.xxx.xxx # Start or attach to tmux session tmux new-session -A -s claude # Start Claude Code claude code # When you need to go AFK, detach from tmux # Press: Ctrl+B(Prefix), then D Accessing Your Session from Anywhere Now your claude code session is running persistently on your Mac inside tmux. You can now disconnect and reconnect from any of your devices without interrupting the process.\nFrom your iPhone/iPad: Open Blink Shell and connect. Mosh will often automatically resume your last session. If not, just re-attach:\n# Connect via Mosh mosh yourusername@100.xxx.xxx.xxx # Re-attach to the tmux session tmux attach -t claude From your Mac: Open your local terminal. You don\u0026rsquo;t need to mosh since you\u0026rsquo;re already on the machine. Just attach to the session directly:\n# Attach to the running session tmux attach -t claude You are now looking at the exact same terminal screen from two different devices. Any command you type on one will appear on the other. This is the power of tmux combined with mosh and tailscale. Claude Code is still running, waiting for your next instruction, no matter where you are.\nTroubleshooting Mosh connection fails?\nCheck if mosh-server is in your PATH: which mosh-server Try specifying full path: mosh --server=\u0026quot;/opt/homebrew/bin/mosh-server\u0026quot; user@ip SSH asks for password?\nVerify your public key is in ~/.ssh/authorized_keys Check file permissions: ls -la ~/.ssh/ Can\u0026rsquo;t reach your Mac?\nConfirm both devices are connected to Tailscale Find your Mac\u0026rsquo;s Tailscale IP: tailscale ip -4 on your Mac Try the Mac\u0026rsquo;s Tailscale IP directly Real-World Usage This setup has transformed how I work with Claude Code. I can:\nStart a refactoring task before heading out Check progress from the gym Provide guidance when Claude hits a roadblock Resume work from a different location seamlessly The key insight: Claude Code works best with human guidance, but that guidance doesn\u0026rsquo;t require being chained to your desk.\nWrapping Up Setting up remote access to Claude Code takes some initial configuration, but the freedom it provides is worth it.\nThe combination of Tailscale, Mosh, and tmux creates a robust foundation for remote development work – not just for Claude Code, but for any long-running terminal tasks.\nTry it out and let me know how it works for you. Happy coding!\n","permalink":"https://www.jeetdesai.com/blog/claude-remote/","summary":"\u003ch1 id=\"remote-claude-code-control-your-ai-assistant-from-anywhere\"\u003eRemote Claude Code: Control Your AI Assistant from Anywhere\u003c/h1\u003e\n\u003cp\u003eEver wanted to check on your Claude Code sessions while you\u0026rsquo;re grabbing coffee? Or maybe you\u0026rsquo;re lying in bed and want to see if that long-running task finally finished? I\u0026rsquo;ve been there. After setting up this workflow, I can now monitor and control Claude Code from my phone and iPad and it\u0026rsquo;s been really fun to use.\u003c/p\u003e\n\u003ch2 id=\"what-were-using\"\u003eWhat We\u0026rsquo;re Using\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTailscale\u003c/strong\u003e: Secure networking to reach your Mac from anywhere\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSSH Keys + Mosh\u003c/strong\u003e: Resilient terminal connections that handle network changes\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003etmux\u003c/strong\u003e: Session persistence so Claude keeps running even if you disconnect\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBlink Shell\u003c/strong\u003e: Terminal app for iOS and iPadOS\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe workflow: Start Claude Code in a tmux session on your Mac, connect via Mosh from your phone, and monitor/control everything remotely.\u003c/p\u003e","title":"Claude Code"},{"content":"Tmux: Your Terminal Sessions, Perfected Ever lost hours of work because your SSH connection dropped? Or wished you could keep multiple terminal tasks running while switching between projects? tmux solves these problems and transforms how you work with the terminal.\ntmux (terminal multiplexer) lets you create persistent terminal sessions that survive disconnections, organize your workspace with windows and panes, and maintain multiple projects simultaneously. It\u0026rsquo;s like having a desktop environment for your terminal.\nWhy tmux Changes Everything Session Persistence: Start a task, disconnect, reconnect hours later – everything\u0026rsquo;s exactly where you left it.\nOrganization: Multiple projects, each with their own windows and panes, all manageable from one interface.\nRemote Work: Essential for SSH sessions – never lose work due to network issues again.\nProductivity: Switch contexts instantly, run background tasks, monitor multiple processes simultaneously.\nInstallation \u0026amp; Basic Setup Install tmux: # macOS brew install tmux # Ubuntu/Debian sudo apt install tmux # CentOS/RHEL sudo yum install tmux Start your first session: # Create a new session tmux # Create a named session tmux new -s myproject # List sessions tmux ls # Attach to existing session tmux attach -t myproject Core Concepts Sessions Think of sessions as separate workspaces. Each project gets its own session.\n# Create session tmux new -s frontend # Detach (keep running) # Press: Ctrl+B, then D # Reattach later tmux attach -t frontend Windows Windows are like tabs – different tasks within a project.\n# Create new window: Ctrl+B, then C # Switch windows: Ctrl+B, then 0-9 # Rename window: Ctrl+B, then , Panes Split windows into multiple terminal panes for side-by-side work.\n# Split horizontally: Ctrl+B, then \u0026#34; # Split vertically: Ctrl+B, then % # Navigate panes: Ctrl+B, then arrow keys Essential Configuration The default tmux setup is functional but not optimal. Here\u0026rsquo;s how to make it yours.\nChange the Prefix Key The default Ctrl+B is awkward. Most users prefer Ctrl+A:\n# ~/.tmux.conf set -g prefix C-a unbind C-b bind-key C-a send-prefix Better Pane Splitting Intuitive split commands that remember your current path:\n# Horizontal split with \u0026#39;v\u0026#39; unbind % bind v split-window -h -c \u0026#34;#{pane_current_path}\u0026#34; # Vertical split with \u0026#39;-\u0026#39; unbind \u0026#39;\u0026#34;\u0026#39; bind - split-window -v -c \u0026#34;#{pane_current_path}\u0026#34; Vim-Style Pane Resizing Resize panes with vim-like hjkl keys:\nbind -r j resize-pane -D 5 bind -r k resize-pane -U 5 bind -r l resize-pane -R 5 bind -r h resize-pane -L 5 # Zoom pane toggle bind -r m resize-pane -Z Enable Mouse Support Modern terminals deserve mouse interaction:\nset -g mouse on Configuration Reload Quick config reloading without restarting tmux:\nunbind r bind r source-file ~/.tmux.conf \\; display-message \u0026#34;Config reloaded!\u0026#34; Advanced Configuration Deep Dive Performance \u0026amp; Responsiveness # Reduce delay for ESC key set -s escape-time 10 # Faster repeat rate set -sg repeat-time 200 # Better terminal support set -sg terminal-overrides \u0026#34;,*:RGB\u0026#34; set -g default-terminal \u0026#34;${TERM}\u0026#34; # Large scrollback buffer set-option -g history-limit 50000 Window \u0026amp; Pane Management # Start numbering at 1 (easier keyboard access) set -g base-index 1 set -g pane-base-index 1 set-window-option -g pane-base-index 1 # Renumber windows automatically setw -g renumber-windows on setw -g automatic-rename on # Vi mode for copy/paste set-window-option -g mode-keys vi Copy Mode Enhancements Vim-style text selection and copying:\nbind-key -T copy-mode-vi \u0026#39;v\u0026#39; send -X begin-selection bind-key -T copy-mode-vi \u0026#39;y\u0026#39; send -X copy-selection # System clipboard integration set -g set-clipboard on # Don\u0026#39;t exit copy mode when dragging unbind -T copy-mode-vi MouseDragEnd1Pane Status Bar Customization Clean, informative status bar:\n# Position and timing set-option -g status-position bottom set -g status-interval 10 # Center window list set -g status-justify centre set -g status-left-length 200 set -g status-right-length 200 # Color scheme set-option -g status-style bg=colour0,fg=colour205 set-window-option -g window-status-style fg=colour123,bg=default,dim set-window-option -g window-status-current-style fg=colour84,bg=default,bright Essential Plugin Ecosystem tmux\u0026rsquo;s plugin manager (TPM) extends functionality significantly.\nPlugin Manager Setup # Add to ~/.tmux.conf set -g @plugin \u0026#39;tmux-plugins/tpm\u0026#39; # Install TPM git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm # Reload config and install plugins: Prefix + I Must-Have Plugins Session Persistence - Never lose sessions again:\nset -g @plugin \u0026#39;tmux-plugins/tmux-resurrect\u0026#39; set -g @plugin \u0026#39;tmux-plugins/tmux-continuum\u0026#39; # Auto-restore sessions set -g @resurrect-capture-pane-contents \u0026#39;on\u0026#39; set -g @continuum-restore \u0026#39;on\u0026#39; Vim Integration - Seamless vim/tmux navigation:\nset -g @plugin \u0026#39;christoomey/vim-tmux-navigator\u0026#39; Fuzzy Finding - Quick session/window/pane switching:\nset -g @plugin \u0026#39;sainnhe/tmux-fzf\u0026#39; # Use: Prefix + F Text Extraction - Copy anything from your terminal:\nset -g @plugin \u0026#39;laktak/extrakto\u0026#39; # Use: Prefix + Tab File Opening - Open files/URLs directly:\nset -g @plugin \u0026#39;tmux-plugins/tmux-open\u0026#39; # Use: Prefix + O Real-World Workflows Development Project Setup # Start new project session tmux new -s project-name # Window 1: Code editor nvim . # Window 2: Development server (Ctrl+A, C) npm run dev # Window 3: Git operations (Ctrl+A, C) # Keep this for commits, pushes, etc. # Split for monitoring (Ctrl+A, -) tail -f logs/app.log Multiple Project Management # Frontend project tmux new -s frontend -d \u0026#39;cd ~/projects/frontend \u0026amp;\u0026amp; nvim\u0026#39; # Backend project tmux new -s backend -d \u0026#39;cd ~/projects/backend \u0026amp;\u0026amp; nvim\u0026#39; # Infrastructure tmux new -s infra -d \u0026#39;cd ~/terraform \u0026amp;\u0026amp; nvim\u0026#39; # Switch between projects instantly tmux attach -t frontend # or backend, infra Remote Server Management # Connect to servers in separate windows tmux new -s servers # Window 1: Production ssh prod-server # Window 2: Staging (Ctrl+A, C) ssh staging-server # Window 3: Database (Ctrl+A, C) ssh db-server # Pane synchronization for bulk operations # Ctrl+A, Q (toggles sync across panes) Pro Tips \u0026amp; Advanced Features Notes Integration Quick note-taking without leaving your workflow:\n# Custom notes menu (Ctrl+A, G) bind g display-menu -T \u0026#34;#[align=centre]Notes\u0026#34; \\ \u0026#34;Create new note\u0026#34; n \\ \u0026#34;command-prompt -p \u0026#39;Note:\u0026#39; \u0026#39;new-window -n notes nvim ~/notes/%%.md\u0026#39;\u0026#34; \\ \u0026#34;Search notes\u0026#34; s \\ \u0026#34;new-window -n notes \u0026#39;cd ~/notes \u0026amp;\u0026amp; nvim \\$(find * -type f | fzf)\u0026#39;\u0026#34; \\ \u0026#34;\u0026#34; \\ \u0026#34;Quit menu\u0026#34; q \u0026#34;\u0026#34; Session Templates Create project templates for consistent setup:\n# ~/.tmux/layouts/web-dev.sh tmux new-session -d -s $1 tmux rename-window \u0026#39;editor\u0026#39; tmux send-keys \u0026#39;nvim .\u0026#39; C-m tmux new-window -n \u0026#39;server\u0026#39; tmux send-keys \u0026#39;npm run dev\u0026#39; C-m tmux new-window -n \u0026#39;git\u0026#39; tmux select-window -t 1 # Usage: ~/.tmux/layouts/web-dev.sh my-project Clipboard Integration System clipboard that works everywhere:\n# Copy to system clipboard bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \u0026#34;pbcopy\u0026#34; # Paste from system clipboard bind-key p paste-buffer Activity Monitoring Know when background tasks complete:\nset -g monitor-activity on set -g visual-activity off # Use status bar instead of popup Troubleshooting Common Issues Colors look wrong?\n# Check terminal support echo $TERM # Should be \u0026#34;screen-256color\u0026#34; or \u0026#34;tmux-256color\u0026#34; # Fix in ~/.tmux.conf set -g default-terminal \u0026#34;screen-256color\u0026#34; Key bindings not working?\n# Reload config tmux source-file ~/.tmux.conf # Check current bindings tmux list-keys Session not persisting?\n# Install resurrect plugin and ensure continuum is saving tmux show -g @continuum-restore # Should show \u0026#34;on\u0026#34; Mouse not working?\n# Enable mouse support set -g mouse on # May need terminal-specific settings for some terminals Wrapping Up tmux transforms terminal work from chaotic to organized. With persistent sessions, you never lose work. With windows and panes, you stay organized. With plugins, you get superpowers.\nThe configuration here represents years of refinement – shortcuts that save hours, plugins that solve real problems, and workflows that scale from single projects to complex infrastructures.\nStart with basic sessions and panes. Add the essential config options. Install a few plugins. Most importantly: use it daily. tmux becomes indispensable once it\u0026rsquo;s part of your muscle memory.\nYour terminal is your workspace. Make it work for you.\n","permalink":"https://www.jeetdesai.com/blog/tmux/","summary":"\u003ch1 id=\"tmux-your-terminal-sessions-perfected\"\u003eTmux: Your Terminal Sessions, Perfected\u003c/h1\u003e\n\u003cp\u003eEver lost hours of work because your SSH connection dropped? Or wished you could keep multiple terminal tasks running while switching between projects? tmux solves these problems and transforms how you work with the terminal.\u003c/p\u003e\n\u003cp\u003etmux (terminal multiplexer) lets you create persistent terminal sessions that survive disconnections, organize your workspace with windows and panes, and maintain multiple projects simultaneously. It\u0026rsquo;s like having a desktop environment for your terminal.\u003c/p\u003e","title":"Tmux"},{"content":"Your commit message was wrong. You accidentally committed to the wrong branch. Your teammate\u0026rsquo;s merge broke everything and you need to find exactly when. Here are the Git commands that can help.\nFix Your Mistakes Wrong commit message git commit --amend -m \u0026#34;Correct message\u0026#34; Changes your last commit message. Only works if you haven\u0026rsquo;t pushed yet.\nUndo your last commit git reset --soft HEAD~1 Removes the commit but keeps your changes staged. Your work is safe.\nWrong branch git log --oneline -1 # Copy the commit hash git reset --hard HEAD~1 # Remove from current branch git checkout correct-branch git cherry-pick abc123 # Apply to correct branch Moves your commit to where it belongs.\nCommitted too early # Make more changes git add . git commit --amend --no-edit Adds new changes to your previous commit.\nClean Your History Squash messy commits git rebase -i HEAD~3 Opens editor. Change pick to squash for commits you want to combine.\nSave work without committing git stash # Save current changes git stash pop # Get them back git stash list # See all stashes git stash drop # Delete a stash Perfect when you need to switch branches quickly.\nFind \u0026ldquo;lost\u0026rdquo; commits git reflog Shows everything you\u0026rsquo;ve done. Find your lost commit hash and git checkout abc123.\nCompare anything git diff HEAD~2 # Changes in last 2 commits git diff main..feature # Changes between branches git diff --name-only # Just file names git diff --stat # Summary stats Keep Things Tidy Clean up untracked files git clean -n # Preview what will be deleted git clean -fd # Actually delete files and directories Removes files that aren\u0026rsquo;t in Git. Use -n first to be safe.\nBetter branch management git branch -d feature # Safe delete (only if merged) git branch -D feature # Force delete git remote prune origin # Remove stale remote branches See what happened git log --oneline --graph # Visual commit history git log --since=\u0026#34;2 weeks ago\u0026#34; --author=\u0026#34;yourname\u0026#34; git show HEAD # Full details of last commit Collaboration Undo public commits safely git revert abc123 # Creates new commit that undoes abc123 Never use reset on published commits. revert is safe for shared history.\nApply commits from other branches git cherry-pick abc123 Copy fixes between branches without merging everything.\nClean merge git merge --squash feature # All changes as single commit git commit -m \u0026#34;Add feature\u0026#34; Keeps main branch history clean.\n","permalink":"https://www.jeetdesai.com/blog/git/","summary":"\u003cp\u003eYour commit message was wrong. You accidentally committed to the wrong branch. Your teammate\u0026rsquo;s merge broke everything and you need to find exactly when. Here are the Git commands that can help.\u003c/p\u003e\n\u003ch2 id=\"fix-your-mistakes\"\u003eFix Your Mistakes\u003c/h2\u003e\n\u003ch3 id=\"wrong-commit-message\"\u003eWrong commit message\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit commit --amend -m \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Correct message\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eChanges your last commit message. Only works if you haven\u0026rsquo;t pushed yet.\u003c/p\u003e\n\u003ch3 id=\"undo-your-last-commit\"\u003eUndo your last commit\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit reset --soft HEAD~1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRemoves the commit but keeps your changes staged. Your work is safe.\u003c/p\u003e","title":"Git"},{"content":"Description VoiceFlow AI Demo Platform - a full-stack application that demonstrates the power of Voice AI technology through an interactive demo experience.\nWhat it does: Users can experience Voice AI in two ways:\nTraditional Demo Request: Fill out a form to schedule a Voice AI demonstration Live Voice AI Call: Enter just a phone number and immediately receive an AI-powered phone call How it works:\nUser Input: User submits phone number through clean, responsive web interface AI Activation: System instantly triggers Voice AI service to place an intelligent phone call Real-Time Processing: Voice AI conducts conversation, processes speech, and generates insights Webhook Integration: Real-time webhook receives call data, transcripts, and analysis results Data Persistence: All conversation data and insights are stored and made accessible through admin dashboard Key Features:\nInstant Voice AI call initiation with phone-only requirement Real-time webhook processing for live call data updates Comprehensive call transcript analysis and data extraction Admin dashboard for managing demos and viewing call analytics Frontend Architecture (Next.js): Leveraged cutting-edge Next.js 15 App Router with React 19, implementing advanced server/client component patterns for optimal performance Built Backend-for-Frontend (BFF) architecture using Next.js API routes for secure external API integration and data orchestration Developed sophisticated form validation system with real-time field-level error feedback, phone number formatting to E.164 standard, and dual submission workflows Implemented multiple React Context providers for complex state management across homepage, landing page, and dashboard interfaces Crafted responsive UI components using Tailwind CSS and HeadlessUI with mobile-first design approach Backend Microservices (NestJS): Architected modular NestJS application with clean separation of concerns: Users module for demo request management, Voice module for API integration, and Webhooks module for real-time data processing Implemented comprehensive API documentation using Swagger decorators with auto-generated endpoints, request/response examples, and validation schemas Built robust DTO (Data Transfer Object) validation system using class-validator decorators for type-safe request handling and structured error responses Designed MongoDB integration with Mongoose ODM featuring advanced schema validation, strategic performance indexing, and soft delete functionality for data integrity Developed global configuration management with environment-based settings and type-safe configuration interfaces API Architecture \u0026amp; Documentation: Developed RESTful API endpoints with comprehensive error handling, structured exception responses, and consistent data formatting Created auto-generated Swagger documentation with interactive API testing, request/response schemas, and authentication examples Implemented global exception filters and validation pipes for consistent error handling and request processing across all endpoints Tech Stack Implementation: Frontend: Next.js 15, React 19, TypeScript, Tailwind CSS, HeadlessUI, React Context API Backend: NestJS, Node.js, TypeScript, Swagger/OpenAPI, Class-validator, Class-transformer Database: MongoDB, Mongoose ODM with advanced indexing and validation Voice AI: External API integration with webhook processing and structured data extraction Development: Concurrent development setup, ESLint, Prettier, Hot module replacement Architecture: Backend-for-Frontend pattern, modular microservices, real-time data synchronization 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/voiceflow/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eVoiceFlow AI Demo Platform - a full-stack application that demonstrates the power of Voice AI technology through an interactive demo experience.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat it does:\u003c/strong\u003e\nUsers can experience Voice AI in two ways:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTraditional Demo Request\u003c/strong\u003e: Fill out a form to schedule a Voice AI demonstration\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLive Voice AI Call\u003c/strong\u003e: Enter just a phone number and immediately receive an AI-powered phone call\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eHow it works:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eUser Input\u003c/strong\u003e: User submits phone number through clean, responsive web interface\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAI Activation\u003c/strong\u003e: System instantly triggers Voice AI service to place an intelligent phone call\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReal-Time Processing\u003c/strong\u003e: Voice AI conducts conversation, processes speech, and generates insights\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWebhook Integration\u003c/strong\u003e: Real-time webhook receives call data, transcripts, and analysis results\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eData Persistence\u003c/strong\u003e: All conversation data and insights are stored and made accessible through admin dashboard\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eKey Features:\u003c/strong\u003e\u003c/p\u003e","title":"VoiceFlow"},{"content":"Description Conversational calorie counter that makes nutrition tracking effortless.\nMacronutrient tracking: Monitor calories, fat, carbs, and protein with interactive donut charts and detailed breakdowns Habit system: Build healthy routines by tracking daily habits like water intake and wellness goals with completion tracking Conversational UI: Log meals naturally through a chat interface - just type what you ate instead of searching food databases Cross-platform native: Single React Native codebase delivering native performance on both iOS and Android devices 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/coco-native/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eConversational calorie counter that makes nutrition tracking effortless.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMacronutrient tracking\u003c/strong\u003e: Monitor calories, fat, carbs, and protein with interactive donut charts and detailed breakdowns\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHabit system\u003c/strong\u003e: Build healthy routines by tracking daily habits like water intake and wellness goals with completion tracking\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eConversational UI\u003c/strong\u003e: Log meals naturally through a chat interface - just type what you ate instead of searching food databases\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCross-platform native\u003c/strong\u003e: Single React Native codebase delivering native performance on both iOS and Android devices\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-github\"\u003e🔗 \u003ca href=\"https://github.com/JEETDESAI25/coco-native\"\u003eGitHub\u003c/a\u003e\u003c/h3\u003e","title":"Coco-Native"},{"content":"Description Customer retention is a critical factor in business success, with understanding and predicting customer behavior being essential for maintaining a competitive edge. This project focuses on developing a customer churn prediction model for an Iranian Telecommunication company to identify customers likely to discontinue services. The model generates binary predictions indicating whether a customer will churn, enabling proactive retention strategies. Our methodology involves three key phases: comprehensive data preprocessing to ensure data quality, construction of three predictive models for comparative analysis, In-depth analysis of results to develop targeted churn mitigation strategies. This systematic approach provides valuable insights for reducing customer attrition and maintaining long-term business sustainability. 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/customer-churn/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCustomer retention is a critical factor in business success, with understanding and predicting customer behavior being essential for maintaining a competitive edge.\u003c/li\u003e\n\u003cli\u003eThis project focuses on developing a customer churn prediction model for an Iranian Telecommunication company to identify customers likely to discontinue services.\u003c/li\u003e\n\u003cli\u003eThe model generates binary predictions indicating whether a customer will churn, enabling proactive retention strategies. Our methodology involves three key phases:\u003c/li\u003e\n\u003cli\u003ecomprehensive data preprocessing to ensure data quality,\u003c/li\u003e\n\u003cli\u003econstruction of three predictive models for comparative analysis,\u003c/li\u003e\n\u003cli\u003eIn-depth analysis of results to develop targeted churn mitigation strategies.\u003c/li\u003e\n\u003cli\u003eThis systematic approach provides valuable insights for reducing customer attrition and maintaining long-term business sustainability.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-github\"\u003e🔗 \u003ca href=\"https://github.com/JEETDESAI25/customer_churn_analysis\"\u003eGitHub\u003c/a\u003e\u003c/h3\u003e","title":"Customer Churn Analysis"},{"content":"Description In a world where social injustices can feel overwhelming, Unite empowers users to stay connected to the causes they care about. Our platform: Makes it easy to stay informed on key issues. Helps users discover new perspectives and insights. Provides opportunities for meaningful engagement and action. By connecting with a community of like-minded individuals, users can amplify their impact, learn together, and create a dedicated space for social change. Tech Stack Frontend \u0026amp; Backend: Built with Next.js for a streamlined user experience. Data Storage: Powered by Firebase. User Authentication: Secure login and profile management via Firebase. Hosting \u0026amp; CI/CD: Managed by Vercel for seamless integration with Next.js. Language: Developed in TypeScript for type safety and robustness. Styling: Crafted with Tailwind CSS for a modern and responsive design. 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/unite/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003ch4 id=\"in-a-world-where-social-injustices-can-feel-overwhelming-unite-empowers-users-to-stay-connected-to-the-causes-they-care-about-our-platform\"\u003eIn a world where social injustices can feel overwhelming, Unite empowers users to stay connected to the causes they care about. Our platform:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMakes it easy to stay informed on key issues.\u003c/li\u003e\n\u003cli\u003eHelps users discover new perspectives and insights.\u003c/li\u003e\n\u003cli\u003eProvides opportunities for meaningful engagement and action.\u003c/li\u003e\n\u003cli\u003eBy connecting with a community of like-minded individuals, users can amplify their impact, learn together, and create a dedicated space for social change.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"tech-stack\"\u003eTech Stack\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eFrontend \u0026amp; Backend: Built with Next.js for a streamlined user experience.\u003c/li\u003e\n\u003cli\u003eData Storage: Powered by Firebase.\u003c/li\u003e\n\u003cli\u003eUser Authentication: Secure login and profile management via Firebase.\u003c/li\u003e\n\u003cli\u003eHosting \u0026amp; CI/CD: Managed by Vercel for seamless integration with Next.js.\u003c/li\u003e\n\u003cli\u003eLanguage: Developed in TypeScript for type safety and robustness.\u003c/li\u003e\n\u003cli\u003eStyling: Crafted with Tailwind CSS for a modern and responsive design.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-github\"\u003e🔗 \u003ca href=\"https://github.com/JEETDESAI25/unite\"\u003eGitHub\u003c/a\u003e\u003c/h3\u003e","title":"Unite"},{"content":"Description Developed a website for Kazakhstan\u0026rsquo;s first padel center, Add-Padel, helping them promote their business and reach a broader audience. Successfully increased traffic to the website, resulting in a significant boost in customer interest and bookings. 🔗 Live ","permalink":"https://www.jeetdesai.com/projects/add-padel/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDeveloped a website for Kazakhstan\u0026rsquo;s first padel center, Add-Padel, helping them promote their business and reach a broader audience.\u003c/li\u003e\n\u003cli\u003eSuccessfully increased traffic to the website, resulting in a significant boost in customer interest and bookings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-live\"\u003e🔗 \u003ca href=\"http://www.add-padel.com/\"\u003eLive\u003c/a\u003e\u003c/h3\u003e","title":"Add Padel Center"},{"content":"Description Developed an intelligent surveillance system using computer vision technology to monitor and detect real-time object movements through webcam feed Implemented sophisticated motion detection algorithms to accurately identify and track new objects entering the camera\u0026rsquo;s field of view Created an automated email notification system that instantly captures and sends high-quality images of detected objects Integrated seamless communication between computer vision processing and email automation for reliable alert delivery Demonstrated strong programming skills in Python, OpenCV library usage, and email API integration 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/webcam-detection/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDeveloped an intelligent surveillance system using computer vision technology to monitor and detect real-time object movements through webcam feed\u003c/li\u003e\n\u003cli\u003eImplemented sophisticated motion detection algorithms to accurately identify and track new objects entering the camera\u0026rsquo;s field of view\u003c/li\u003e\n\u003cli\u003eCreated an automated email notification system that instantly captures and sends high-quality images of detected objects\u003c/li\u003e\n\u003cli\u003eIntegrated seamless communication between computer vision processing and email automation for reliable alert delivery\u003c/li\u003e\n\u003cli\u003eDemonstrated strong programming skills in Python, OpenCV library usage, and email API integration\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-github\"\u003e🔗 \u003ca href=\"https://github.com/JEETDESAI25/email-webcam-detection\"\u003eGitHub\u003c/a\u003e\u003c/h3\u003e","title":"Webcam-Detection"},{"content":"Description Engineered an automated web scraping system to track and monitor musical tour updates from band websites in real-time Implemented Python\u0026rsquo;s BeautifulSoup library to extract tour dates, venues, and ticket information efficiently Developed an automated email notification system using SMTP to instantly alert subscribed fans about new tour announcements Created a SQLite database to store and manage tour data, enabling quick comparison for detecting new updates Built a robust error handling system to ensure continuous operation and reliable data collection Demonstrated strong technical skills in web scraping, automation, database management, and email integration 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/web-scraping/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEngineered an automated web scraping system to track and monitor musical tour updates from band websites in real-time\u003c/li\u003e\n\u003cli\u003eImplemented Python\u0026rsquo;s BeautifulSoup library to extract tour dates, venues, and ticket information efficiently\u003c/li\u003e\n\u003cli\u003eDeveloped an automated email notification system using SMTP to instantly alert subscribed fans about new tour announcements\u003c/li\u003e\n\u003cli\u003eCreated a SQLite database to store and manage tour data, enabling quick comparison for detecting new updates\u003c/li\u003e\n\u003cli\u003eBuilt a robust error handling system to ensure continuous operation and reliable data collection\u003c/li\u003e\n\u003cli\u003eDemonstrated strong technical skills in web scraping, automation, database management, and email integration\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-github\"\u003e🔗 \u003ca href=\"https://github.com/JEETDESAI25/Scraping-tours-sql\"\u003eGitHub\u003c/a\u003e\u003c/h3\u003e","title":"Web Scraping Musical Event"},{"content":"Description Engineered a dynamic weather forecast application featuring real-time data visualization for any global city\u0026rsquo;s 5-day weather outlook. Leveraged the OpenWeatherMap API to fetch comprehensive meteorological data, implementing an intuitive interface with interactive charts and responsive design. The application processes complex weather parameters including temperature variations, humidity levels, wind patterns, and precipitation forecasts, presenting them through custom-built data visualizations. Enhanced user experience by incorporating geolocation services, search autocomplete, and mobile-responsive design, while ensuring optimal performance through efficient API handling and data caching strategies. 🔗 View App 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/weather-forecast/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEngineered a dynamic weather forecast application featuring real-time data visualization for any global city\u0026rsquo;s 5-day weather outlook.\u003c/li\u003e\n\u003cli\u003eLeveraged the OpenWeatherMap API to fetch comprehensive meteorological data, implementing an intuitive interface with interactive charts and responsive design.\u003c/li\u003e\n\u003cli\u003eThe application processes complex weather parameters including temperature variations, humidity levels, wind patterns, and precipitation forecasts, presenting them through custom-built data visualizations.\u003c/li\u003e\n\u003cli\u003eEnhanced user experience by incorporating geolocation services, search autocomplete, and mobile-responsive design, while ensuring optimal performance through efficient API handling and data caching strategies.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-view-app\"\u003e🔗 \u003ca href=\"https://weather-forecast-25.herokuapp.com\"\u003eView App\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"-github\"\u003e🔗 \u003ca href=\"https://github.com/JEETDESAI25/Weather-Forecast-Data-App\"\u003eGitHub\u003c/a\u003e\u003c/h3\u003e","title":"Weather Forecast App"},{"content":"Description Developed a comprehensive mobile application \u0026ldquo;E Society\u0026rdquo; using Android Studio and Java Implemented secure and efficient monthly bill payment system for residential communities Integrated smart notification system for community meetings and important events Created user-friendly interface for seamless interaction between residents and society management Built features for managing maintenance requests and community announcements Enhanced daily communication and administrative tasks for apartment complexes and residential colonies 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/e-society/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDeveloped a comprehensive mobile application \u0026ldquo;E Society\u0026rdquo; using Android Studio and Java\u003c/li\u003e\n\u003cli\u003eImplemented secure and efficient monthly bill payment system for residential communities\u003c/li\u003e\n\u003cli\u003eIntegrated smart notification system for community meetings and important events\u003c/li\u003e\n\u003cli\u003eCreated user-friendly interface for seamless interaction between residents and society management\u003c/li\u003e\n\u003cli\u003eBuilt features for managing maintenance requests and community announcements\u003c/li\u003e\n\u003cli\u003eEnhanced daily communication and administrative tasks for apartment complexes and residential colonies\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-github\"\u003e🔗 \u003ca href=\"https://github.com/JEETDESAI25/E-Society\"\u003eGitHub\u003c/a\u003e\u003c/h3\u003e","title":"E-Society"},{"content":"Description A sleek, minimalist productivity app crafted to eliminate distractions and enhance focus on your most important tasks Built with TypeScript to deliver a robust and type-safe task management experience Features an intuitive interface for seamless task creation, editing, and deletion Implements drag-and-drop functionality for easy task prioritization Includes local storage integration to persist your tasks between sessions Responsive design ensures a consistent experience across all devices Clean and modern UI with smooth animations and transitions 🔗 GitHub ","permalink":"https://www.jeetdesai.com/projects/taskify/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA sleek, minimalist productivity app crafted to eliminate distractions and enhance focus on your most important tasks\u003c/li\u003e\n\u003cli\u003eBuilt with TypeScript to deliver a robust and type-safe task management experience\u003c/li\u003e\n\u003cli\u003eFeatures an intuitive interface for seamless task creation, editing, and deletion\u003c/li\u003e\n\u003cli\u003eImplements drag-and-drop functionality for easy task prioritization\u003c/li\u003e\n\u003cli\u003eIncludes local storage integration to persist your tasks between sessions\u003c/li\u003e\n\u003cli\u003eResponsive design ensures a consistent experience across all devices\u003c/li\u003e\n\u003cli\u003eClean and modern UI with smooth animations and transitions\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-github\"\u003e🔗 \u003ca href=\"https://github.com/JEETDESAI25/Taskify\"\u003eGitHub\u003c/a\u003e\u003c/h3\u003e","title":"Taskify"},{"content":"Description\nDeveloped full-stack solutions across Sold.com\u0026rsquo;s real estate platform - a monorepo architecture serving agents, consumers, administrators, and sellers through 6 integrated applications and 15+ microservices.\nKey Technical Contributions:\nContributed to monorepo architecture managing 6 main applications with a unified shared component library ecosystem react-core-v3 shared component library, serving multiple applications with TypeScript, Rollup bundling, and comprehensive Storybook documentation Worked on cross-application dependencies and coordinated seamless deployments across development, UAT, and production environments Frontend Development:\nDeveloped applications across the Next.js ecosystem (versions 8-15), participating in strategic migration planning for legacy codebases Built React applications spanning versions 16-19, implementing modern concurrent features and performance optimizations Implemented state management solutions using Redux, Redux Saga, Redux Toolkit, and Context API patterns Built responsive, accessible components with Material-UI (v3-v5), TailwindCSS, Headless UI, and custom SCSS architectures Backend Development \u0026amp; Microservices:\nContributed to a comprehensive microservices ecosystem with 15+ NestJS services handling agent management, consumer processing, email campaigns, SMS communications, payment processing, Salesforce integration, and automated fulfillment Built enterprise-grade APIs with comprehensive OpenAPI/Swagger documentation and TypeScript DTOs Participated in event-driven architecture implementation using Redis queues, inter-service communication, and distributed patterns Developed ETL processes for multi-source data integration including Stripe payments, Salesforce CRM, and real estate data Worked with polyglot persistence strategies using MongoDB (Mongoose) for business logic, PostgreSQL (TypeORM) for transactional data, Redis for caching, and Redshift (KnexJS) for analytics Tech Stack Summary:\nFrontend: Next.js (8-15), React (16-19), TypeScript, Redux/RTK, Material-UI (v3-v5), TailwindCSS, Headless UI, SCSS/LESS Backend: NestJS, Node.js, Express, TypeScript Databases: MongoDB (Mongoose), PostgreSQL (TypeORM), Redis, Redshift (KnexJS) CMS: Contentful (headless CMS) Cloud \u0026amp; Infrastructure: AWS (ECS, Lambda, S3, CloudWatch, Amplify, Cognito, Parameter Store, CloudFront), Docker External APIs: Salesforce, Stripe, Twilio, OpenAI, Google APIs (Maps, Calendar, Analytics), Contentful CMS Authentication: AWS Amplify/Cognito, NextAuth v4, JWT Testing: Jest, Playwright, Cypress, React Testing Library Build Tools: Rollup, Webpack, Babel, ESLint, Prettier State Management: Redux, Redux Saga, Redux Thunk, Context API UI Libraries: Material-UI, React Icons, Recharts, React Calendar, React Hook Form, Formik Development Tools: Storybook, Husky, Lint-staged, Nodemon Queue \u0026amp; Jobs: Bull (Redis queues), NestJS Schedule, Cron Documentation: Swagger/OpenAPI, Storybook DevOps: Jenkins, AWS CodeBuild, Bitbucket, Docker, multi-environment CI/CD Version Control: Git (Bitbucket) Monitoring: AWS CloudWatch, Application logging Package Management: npm, npm link (for shared library) Architecture: Microservices, event-driven patterns, API gateways, real-time WebSocket features 🔗 GitHub ","permalink":"https://www.jeetdesai.com/experience/full-stack-sold/","summary":"\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eDeveloped full-stack solutions across Sold.com\u0026rsquo;s real estate platform - a monorepo architecture serving agents, consumers, administrators, and sellers through 6 integrated applications and 15+ microservices.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eKey Technical Contributions:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eContributed to monorepo architecture managing 6 main applications with a unified shared component library ecosystem\u003c/li\u003e\n\u003cli\u003ereact-core-v3 shared component library, serving multiple applications with TypeScript, Rollup bundling, and comprehensive Storybook documentation\u003c/li\u003e\n\u003cli\u003eWorked on cross-application dependencies and coordinated seamless deployments across development, UAT, and production environments\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFrontend Development:\u003c/strong\u003e\u003c/p\u003e","title":"Software Engineer"},{"content":"Description Optimized local development by streamlining the Docker workflow, reducing setup time by 30% for new engineers. Evaluated AWS, Azure, and Google Cloud platforms, leading to a cost-effective migration, saved 20% in expenses. Deployed AWS infrastructure using Terraform, reducing manual setup time 50% and improving scalability. Desiging and implementing CI/CD pipelines, automating deployments and reducing release time by 40%, ensuring faster and more reliable software delivery. Optimized React Native frontend for cross-platform Expo app, reducing UI latency 25% and enhancing user responsiveness on both web and mobile. Reviewed Git pull requests and provided feedback, ensuring code quality and reducing bug occurrences by 30%. ","permalink":"https://www.jeetdesai.com/experience/sde-mealmate/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOptimized local development by streamlining the Docker workflow, reducing setup time by 30% for new engineers.\u003c/li\u003e\n\u003cli\u003eEvaluated AWS, Azure, and Google Cloud platforms, leading to a cost-effective migration, saved 20% in expenses.\u003c/li\u003e\n\u003cli\u003eDeployed AWS infrastructure using Terraform, reducing manual setup time 50% and improving scalability.\u003c/li\u003e\n\u003cli\u003eDesiging and implementing CI/CD pipelines, automating deployments and reducing release time by 40%, ensuring\nfaster and more reliable software delivery.\u003c/li\u003e\n\u003cli\u003eOptimized React Native frontend for cross-platform Expo app, reducing UI latency 25% and enhancing user\nresponsiveness on both web and mobile.\u003c/li\u003e\n\u003cli\u003eReviewed Git pull requests and provided feedback, ensuring code quality and reducing bug occurrences by 30%.\u003c/li\u003e\n\u003c/ul\u003e","title":"Software Engineer"},{"content":"Description Designing and developing a cross-platform mobile application using React Native to provide personalized food recommendations with a focus on adequate nutrient intake. The user-friendly app provides personalized recommendations, helping individuals make healthier food choices and leading a more balanced and nutritious lifestyle. Engineered backend scalability using PostgreSQL for database management and implemented asynchronous processing with Celery and RabbitMQ, improving system reliability by 35%. Implemented CI/CD pipeline using Docker and GitHub Actions, reducing deployment time by 40% and ensuring cross-environment consistency. Resolved device-specific UI issues for iPhone models using NativeWind, ensuring consistent user experience. Designed secure password reset system and implemented JWT authentication, reducing support tickets by 25%. Automated database migrations using Alembic, saving 5-10 hours weekly on manual operations. Developed real-time monitoring system for Flask servers, optimizing route functionality and improving performance by 15%. Developed ETL pipelines for data preprocessing, improving data accessibility by 20%. Maintained agile project delivery through weekly stakeholder updates and SDLC practices. ","permalink":"https://www.jeetdesai.com/experience/ra/","summary":"\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDesigning and developing a cross-platform mobile application using React Native to provide personalized food recommendations with a focus on adequate nutrient intake.\u003c/li\u003e\n\u003cli\u003eThe user-friendly app provides personalized recommendations, helping individuals make healthier food choices and leading a more balanced and nutritious lifestyle.\u003c/li\u003e\n\u003cli\u003eEngineered backend scalability using PostgreSQL for database management and implemented asynchronous processing with Celery and RabbitMQ, improving system reliability by 35%.\u003c/li\u003e\n\u003cli\u003eImplemented CI/CD pipeline using Docker and GitHub Actions, reducing deployment time by 40% and ensuring cross-environment consistency.\u003c/li\u003e\n\u003cli\u003eResolved device-specific UI issues for iPhone models using NativeWind, ensuring consistent user experience.\u003c/li\u003e\n\u003cli\u003eDesigned secure password reset system and implemented JWT authentication, reducing support tickets by 25%.\u003c/li\u003e\n\u003cli\u003eAutomated database migrations using Alembic, saving 5-10 hours weekly on manual operations.\u003c/li\u003e\n\u003cli\u003eDeveloped real-time monitoring system for Flask servers, optimizing route functionality and improving performance by 15%.\u003c/li\u003e\n\u003cli\u003eDeveloped ETL pipelines for data preprocessing, improving data accessibility by 20%.\u003c/li\u003e\n\u003cli\u003eMaintained agile project delivery through weekly stakeholder updates and SDLC practices.\u003c/li\u003e\n\u003c/ul\u003e","title":"Software Engineer Research Assistant"},{"content":"Description Worked for the Global Policy Institute(GPI) as a Graduate Assitant. Successfully managed the website for the Global Policy Institute (GPI), improving the user experience and enhancing its functionality. Utilized web scraping techniques to gather data and created a comprehensive database using Excel. ","permalink":"https://www.jeetdesai.com/experience/ga/","summary":"\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eWorked for the \u003cstrong\u003e\u003ca href=\"https://bellarmine.lmu.edu/gpi/\"\u003eGlobal Policy Institute(GPI)\u003c/a\u003e\u003c/strong\u003e as a Graduate Assitant.\u003c/li\u003e\n\u003cli\u003eSuccessfully managed the website for the Global Policy Institute (GPI), improving the user experience and enhancing its functionality.\u003c/li\u003e\n\u003cli\u003eUtilized web scraping techniques to gather data and created a comprehensive database using Excel.\u003c/li\u003e\n\u003c/ul\u003e","title":"Software Engineer Graduate Assistant"}]